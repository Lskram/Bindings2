using System;
using System.Net.Sockets;
using System.Threading.Tasks;
using System.Security.Cryptography;

public class SecurityTools
{
    public class NetworkScanner
    {
        public async Task ScanNetwork(string ipRange)
        {
            // ตรวจสอบพอร์ตที่เปิดใช้งาน
            await ScanOpenPorts(ipRange);

            // ตรวจสอบบริการที่ทำงาน
            // You can add code here to detect services if needed
        }

        private async Task ScanOpenPorts(string ip)
        {
            // Define a list of common ports to scan
            int[] portsToScan = { 80, 443, 22, 21, 3389 }; // HTTP, HTTPS, SSH, FTP, RDP

            Console.WriteLine($"Scanning ports for IP: {ip}");

            foreach (var port in portsToScan)
            {
                bool isOpen = await IsPortOpen(ip, port);
                Console.WriteLine($"Port {port} is {(isOpen ? "open" : "closed")}");
            }
        }

        private async Task<bool> IsPortOpen(string ip, int port)
        {
            try
            {
                using (var client = new TcpClient())
                {
                    // Try to connect to the given IP and port
                    var connectTask = client.ConnectAsync(ip, port);
                    var timeoutTask = Task.Delay(2000); // 2-second timeout

                    var completedTask = await Task.WhenAny(connectTask, timeoutTask);
                    if (completedTask == connectTask && client.Connected)
                    {
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error scanning port {port} on {ip}: {ex.Message}");
            }
            return false;
        }
    }
}